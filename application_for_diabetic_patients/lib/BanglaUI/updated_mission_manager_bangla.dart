// ЁЯУБ lib/Updated_Home/mission_manager.dart
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:intl/intl.dart';

class MissionManager {
  static const _weeklyKey = 'рж╕рж╛ржкрзНрждрж╛рж╣рж┐ржХ_ржорж┐рж╢ржи';         // key ржмрж╛ржВрж▓рж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рж▓рзЛ
  static const _lastResetKey = 'ржорж┐рж╢ржи_рж░рж┐рж╕рзЗржЯ_рж╕ржорзЯ';     // key ржмрж╛ржВрж▓рж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рж▓рзЛ
  static final _missions = [
    'ржЧрзНрж▓рзБржХрзЛржЬ рзк ржмрж╛рж░ рж▓ржЧ ржХрж░рзБржи',
    'ржоржирзЗрж░ ржЕржмрж╕рзНржерж╛ рзй ржмрж╛рж░ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рзБржи',
    'рзлржЯрж┐ ржЦрж╛ржмрж╛рж░ рж▓ржЧ ржХрж░рзБржи'
  ];

  /// ржорж┐рж╢ржиржЧрзБрж▓рзЛ ржирж┐рзЯрзЗ ржЖрж╕рзЗ, рж╕рж╛ржкрзНрждрж╛рж╣рж┐ржХ рж░рж┐рж╕рзЗржЯ ржЪрзЗржХ ржХрж░рзЗ
  static Future<List<String>> getMissions() async {
    final prefs = await SharedPreferences.getInstance();
    final lastResetStr = prefs.getString(_lastResetKey);
    final now = DateTime.now();

    // ржЪрзЗржХ ржХрж░рзБржи ржирждрзБржи рж╕ржкрзНрждрж╛рж╣ рж╢рзБрж░рзБ рж╣рзЯрзЗржЫрзЗ ржХрж┐ ржирж╛ рж╢рзЗрж╖ рж░рж┐рж╕рзЗржЯрзЗрж░ ржкрж░ ржерзЗржХрзЗ
    if (lastResetStr != null) {
      final lastReset = DateTime.parse(lastResetStr);
      // рж╣рж┐рж╕рж╛ржм ржХрж░рзБржи рж╢рзЗрж╖ рж░рж┐рж╕рзЗржЯ ржерзЗржХрзЗ ржкрж░ржмрж░рзНрждрзА рж╕рзЛржоржмрж╛рж░ ржХрждржжрж┐ржи ржкрж░рзЗ
      final daysUntilNextFromLastReset = (DateTime.monday - lastReset.weekday + 7) % 7;
      final nextFromLastReset = lastReset.add(Duration(days: daysUntilNextFromLastReset));

      // ржпржжрж┐ ржПржЦржи рж╕ржорзЯ ржкрж░ржмрж░рзНрждрзА рж╕рзЛржоржмрж╛рж░рзЗрж░ ржкрж░рзЗ рж╣рзЯ ржПржмржВ ржЖржЬ рж╕рзЛржоржмрж╛рж░ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ рж░рж┐рж╕рзЗржЯ ржжрж┐ржи
      if (now.isAfter(nextFromLastReset) && now.weekday == DateTime.monday) {
        await resetMissions(); // ржирждрзБржи рж╕ржкрзНрждрж╛рж╣рзЗ ржорж┐рж╢ржи рж░рж┐рж╕рзЗржЯ
      }
    } else {
      // ржпржжрж┐ ржЖржЧрзЗ ржХржЦржирзЛ рж░рж┐рж╕рзЗржЯ ржирж╛ ржХрж░рж╛ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржкрзНрж░ржержоржмрж╛рж░ рж░рж┐рж╕рзЗржЯ ржХрж░рзБржи
      await resetMissions();
    }
    return _missions;
  }

  /// ржорж┐рж╢ржирзЗрж░ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржирж┐рзЯрзЗ ржЖрж╕рзЗ (рж╕ржорзНржкржирзНржи/ржЕрж╕ржорзНржкржирзНржи)
  static Future<List<String>> getMissionStatus() async {
    final prefs = await SharedPreferences.getInstance();
    // ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржорж┐рж╢ржиржЧрзБрж▓рзЛ рж▓рзЛржб рж╣рзЯрзЗржЫрзЗ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржирзЗржУрзЯрж╛рж░ ржЖржЧрзЗ
    await getMissions(); // ржПрждрзЗ _weeklyKey ржЖржкржбрзЗржЯ ржерж╛ржХрзЗ
    return prefs.getStringList(_weeklyKey) ?? List.filled(_missions.length, '0');
  }

  /// ржорж┐рж╢ржи рж░рж┐рж╕рзЗржЯ ржХрж░рзЗ, рж╕ржм ржорж┐рж╢ржиржХрзЗ ржЕрж╕ржорзНржкржирзНржи ('0') ржХрж░рзЗ рж╕рзЗржЯ ржХрж░рзЗ
  static Future<void> resetMissions() async {
    final prefs = await SharedPreferences.getInstance();
    final now = DateTime.now();
    prefs.setString(_lastResetKey, now.toIso8601String());
    // рж╕ржм ржорж┐рж╢ржиржХрзЗ ржЕрж╕ржорзНржкржирзНржи ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рзБржи
    prefs.setStringList(_weeklyKey, List.filled(_missions.length, '0'));
  }

  /// ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржорж┐рж╢ржи рж╕ржорзНржкржирзНржи рж╣рж┐рж╕рзЗржмрзЗ ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рзЗ
  static Future<void> complete(int index) async {
    final prefs = await SharedPreferences.getInstance();
    List<String> status = prefs.getStringList(_weeklyKey) ?? List.filled(_missions.length, '0');
    if (index >= 0 && index < status.length && status[index] == '0') {
      status[index] = '1'; // рж╕ржорзНржкржирзНржи рж╣рж┐рж╕рзЗржмрзЗ ржЪрж┐рж╣рзНржирж┐ржд
      prefs.setStringList(_weeklyKey, status);
      _speak("рж╕рж╛ржкрзНрждрж╛рж╣рж┐ржХ ржорж┐рж╢ржи рж╕ржорзНржкржирзНржи: ${_missions[index]}");
    }
  }

  /// ржЯрзЗржХрзНрж╕ржЯ ржЯрзБ рж╕рзНржкрж┐ржЪ (ржмрж╛ржВрж▓рж╛рзЯ ржХржерж╛ ржмрж▓рж╛рж░ ржЬржирзНржп)
  static void _speak(String text) async {
    final tts = FlutterTts();
    await tts.setLanguage("bn-BD"); // ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ рж╕рзЗржЯ ржХрж░рзБржи
    await tts.speak(text);
  }
}
